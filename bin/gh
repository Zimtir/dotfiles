#!/usr/bin/python

import argparse
import os

def exec_cmd(cmd):
    os.system(cmd)

def current_branch():
    return os.popen("git rev-parse --abbrev-ref HEAD").read()


if __name__ == "__main__":
    join_args = lambda args: " ".join(args)

    parser = argparse.ArgumentParser()
    parser.add_argument("-test", type=str, metavar="")
    parser.add_argument("-a", help="git add [args=.]", type=str, nargs="*", metavar="")
    parser.add_argument("-ch", help="git checkout [args]", type=str, metavar="")
    parser.add_argument("-chf", help="git checkout [args[0]] -- [args[1]]", type=str, nargs=2, metavar="")
    parser.add_argument("-cln", help="git clean -fd", action="store_true")
    parser.add_argument("-clb", help='git branch | grep -v "master" | xargs git branch -D', action="store_true")
    parser.add_argument("-cm", help="git commit -m [arg]", type=str, metavar="")
    parser.add_argument("-f", help="git fetch", action="store_true")
    parser.add_argument("-p", help="git pull", action="store_true")
    parser.add_argument("-pup", help="git push -u origin <current_branch>", action="store_true")
    parser.add_argument("-po", help="git push origin <current_branch>", action="store_true")
    parser.add_argument("-ph", help="git push heroku <current_branch>", action="store_true")
    parser.add_argument("-pr", help="git push [args] <current_branch>", type=str, metavar="")
    parser.add_argument("-rbi", help="git rebase -i head~[args]", type=int, metavar="")
    parser.add_argument("-rba", help="git rebase --abort", action="store_true")
    parser.add_argument("-rh", help="git reset HEAD [args=.]", type=str, nargs="*", metavar="")
    parser.add_argument("-s", help="git status", action="store_true")
    parser.add_argument("-st", help="git stash [arg] {c=clear, p=pop, s=show, l=list, .=''}", nargs="?", choices=["c", "p", "s", "l", "."])
    parser.add_argument("-ulc", help="git reset --soft HEAD~1", action="store_true")

    args = parser.parse_args()

    if args.s:
        exec_cmd("git status")
 
    if args.a != None:
        if len(args.a) == 0:
            exec_cmd("git add .")
        else:
            exec_cmd("git add %s" % join_args(args.a))

    if args.rh != None:
        if len(args.rh) == 0:
            exec_cmd("git reset HEAD .")
        else:
            exec_cmd("git reset HEAD %s" % join_args(args.rh))
    
    if args.cm:
        exec_cmd("git commit -m '%s'" % args.cm)

    if args.po:
        exec_cmd("git push origin %s" % current_branch())

    if args.ph:
        exec_cmd("git push heroku %s" % current_branch())

    if args.pr:
        exec_cmd("git push %s %s" % (args.pr, current_branch()))

    if args.st:
        if args.st == ".":
            exec_cmd("git stash")
        else:
            if args.st == "p":
                exec_cmd("git stash %s" % "pop")
            elif args.st == "c":
                exec_cmd("git stash %s" % "clear")
            elif args.st == "l":
                exec_cmd("git stash %s" % "list")
            elif args.st == "s":
                exec_cmd("git stash %s" % "show")

    if args.ulc:
        exec_cmd("git reset --soft HEAD~1")

    if args.chf:
        exec_cmd("git checkout %s -- %s" % (args.chf[0], args.chf[1]))

    if args.p:
        exec_cmd("git pull")

    if args.f:
        exec_cmd("git fetch")

    if args.ch:
        exec_cmd("git checkout %s" % args.ch)

    if args.rbi:
        exec_cmd("git rebase -i head~%d" % args.rbi)

    if args.rba:
        exec_cmd("git rebase --abort")

    if args.pup:
        exec_cmd("git push -u origin %s" % current_branch())

    if args.clb:
        exec_cmd('git branch | grep -v "master" | xargs git branch -D')

    if args.cln:
        exec_cmd("git clean -fd")

